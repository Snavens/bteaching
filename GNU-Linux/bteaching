#!/usr/bin/env bash
#
#   Copyright (c) 2023 falkensnavens
#   All rights reserved.
#   falkensnavens@gmail.com
#
# print usage and exit
if [ $# -eq 0 ];then
    echo "Usage: $(basename $0) {arg}
    args:
        --help | -h
            --print help
        | -reset | <book>
            --resets a book, incase it exhibits errors 
        -r  --selects random book/chapter"
    exit 0
fi
base_dir=~/.cache/$(basename $0);range='[0-9]+$'
tmp_file=.$(basename $0).tmp;hist_file=.$(basename $0).hist
# error function
error(){
    echo "Follow this format <book> | <line.chapter|-r> | <video|audio> "
    exit $?
}
# Check if running on Linux
case "$(uname -o)" in
    *inux*) linux=true ;;
    *) linux=false ;;
esac
#check requirements
check_command(){
    case $linux in
    true)
        for pkg in $@;do
            if [[ ! $(command -v $pkg) ]];then
                echo -e "\e[091mcommand $pkg not found!\e[092m\ntry installing it your distribution way..\e[0m"
                echo "then try executing script again"
                exit $?
            fi
        done
    ;;
    false)
        echo "this script runs on linux, please switch to linux to try it.."
        exit $?
    ;;
    esac
}
check_command wget mpv cyt-dl ffmpeg
case $1 in
    # show help
    --help | -h )
        echo -e "
This piece of code aims to take you through the whole bible.
Enjoy a well elaborated teaching by pastor Paul for more visit \e[092mhttps://www.ccontario.com\e[0m\n
Ok, so this is how it works:
  Argument is given as the book that you need to study and you will be prompted with the verse.
  You have to give your initial input in small letters and don't include spaces
example: \e[095mbteaching titus\e[97m
  Incase you happen to encounter any error or you want to update a book try passing reset as argument
example: \e[095mbteaching reset 2timothy\e[97m
\nI hope that was all you needed to know about this code. Enjoy !
        "
        exit $?
    ;;
    # clear local cache
    *reset)
        shift
            if [[ -d $base_dir && $# -ne 0 ]];then
                cd $base_dir/ && rm .*$1* *$1* >/dev/null 2>&1
        else
            echo "nothing to reset here, quitting.."
        fi 
        exit $?
    ;;
    -p)
        if test -f ${hist_file};then
            head -n1|bash
        else
            echo no history yet!
        fi
        exit $?
    ;;
    *)
        random_generate(){
            until [[ "$book" -gt 0 && "$book" -lt 67 ]];do 
                book=`cat /dev/urandom|tr -cd '1-9'|head -c24|awk '{print $1}'` && book="${book::2}"
                if [[ $book -gt 66 ]];then
                    book="0${book: -1}"
                    break
                fi
            done
            $0 -r $type $"b$book"
        }
        # check if range requirement was met
        if [[ $# -ne 1 && ! $2 =~ $range && $2 != video && $2 != audio && $2 != -r ]];then
            echo "all you have to do is enter a book you wish to study"
            echo -e "here is an example:\n  bteaching genesis"
            exit $?
        elif [[ $1 == -r ]];then
            if [[ $# -eq 2&&$2 == video ]];then
                type=video;shift 1
                random_generate
            elif [[ $# -eq 2&&$2 == audio ]];then
                type=audio;shift 1
                random_generate
            else
                shift
                [[ $# -eq 0 ]] && for x in {1..7};do echo -e 'audio\nvideo';done|shuf|head -n1|$0 -r $(</dev/stdin) || {
                    case $2 in
                        b01) $0 genesis -r $1 ;;b02) $0 exodus -r $1 ;;b03) $0 leviticus -r $1 ;;b04) $0 numbers -r $1 ;;b05) $0 deuteronomy -r $1 ;;
                        b06) $0 joshua -r $1 ;;b07) $0 judges -r $1 ;;b08) $0 ruth -r $1 ;;b09) $0 "1samuel" -r $1 ;;b10) $0 "2samuel" -r $1 ;;
                        b11) $0 "1kings" -r $1 ;;b12) $0 "2kings" -r $1 ;;b13) $0 "1chronicles" -r $1 ;;b14) $0 "2chronicles" -r $1 ;;b15) $0 ezra -r $1 ;;
                        b16) $0 nehemiah -r $1 ;;b17) $0 esther -r $1 ;;b18) $0 job -r $1 ;;b19) $0 psalms -r $1 ;;b20) $0 proverbs -r $1 ;;
                        b21) $0 ecclesiastes -r $1 ;;b22) $0 songofsolomon  -r $1 ;;b23) $0 isaiah -r $1 ;;b24) $0 jeremiah -r $1 ;;b25) $0 lamentations -r $1 ;;
                        b26) $0 ezekiel -r $1 ;;b27) $0 daniel -r $1 ;;b28) $0 hosea -r $1 ;;b29) $0 joel -r $1 ;;b30) $0 amos -r $1 ;;b31) $0 obadiah -r $1 ;;
                        b32) $0 jonah -r $1 ;;b33) $0 micah -r $1 ;;b34) $0 nahum -r $1 ;;b35) $0 habakkuk -r $1 ;;b36) $0 zephaniah -r $1 ;;b37) $0 haggai -r $1 ;;
                        b38) $0 zechariah -r $1 ;;b39) $0 malachi -r $1 ;;b40) $0 matthew -r $1 ;;b41) $0 mark -r $1 ;;b42) $0 luke -r $1 ;;b43) $0 john -r $1 ;;
                        b44) $0 acts -r $1 ;;b45) $0 romans -r $1 ;;b46) $0 "1corinthians" -r $1 ;;b47) $0 "2corinthians" -r $1 ;;b48) $0 galatians -r $1 ;;
                        b49) $0 ephesians -r $1 ;;b50) $0 philippians -r $1 ;;b51) $0 colossians -r $1 ;;b52) $0 "1thessalonians" -r $1 ;;b53) $0 "2thessalonians" -r $1 ;;
                        b54) $0 "1timothy" -r $1 ;;b55) $0 "2timothy" -r $1 ;;b56) $0 titus -r $1 ;;b57) $0 philemon -r $1 ;;b58) $0 hebrews -r $1 ;;b59) $0 james -r $1 ;;
                        b60) $0 "1peter" -r $1 ;;b61) $0 "2peter" -r $1 ;;b62) $0 "1john" -r $1 ;;b63) $0 "2john" -r $1 ;;b64) $0 "3john" -r $1 ;;b65) $0 jude -r $1 ;;
                        b66) $0 revelation -r $1 ;;
                        esac
                }
            fi
        else
            # create cache directories if absent
            if [[ ! -d $base_dir ]];then
                mkdir -p $base_dir
            fi
            cd ${base_dir}
            # clear if there is left mess
            if [[ -f $1 ]];then
                if [[ ! $(grep -oP '(?<=href=").*?(?=.mp3)' $1) ]];then
                    rm $1 >/dev/null 2>&1
                fi
            else
                rm .$1.log >/dev/null 2>&1
            fi
            # assign bk as book variable if specified
            if test ! -z $1;then
                bk=$1
                if [[ $# -gt 1 ]];then
                    shift;file_format=$2
                fi
            else
                echo "Cannot recognize book!"
                exit $?
            fi
            # fetch book links if not present in local storage
            if [[ ! -f $bk ]];then
                case $bk in
                    genesis|exodus|leviticus|numbers|deuteronomy|joshua|judges|ruth|1samuel|2samuel|1kings|\
                    2kings|1chronicles|2chronicles|ezra|nehemiah|esther|job|psalms|proverbs|ecclesiastes|songofsolomon|\
                    isaiah|jeremiah|lamentations|ezekiel|daniel|hosea|joel|amos|obadiah|jonah|micah|nahum|habakkuk|zephaniah|haggai|\
                    zechariah|malachi|matthew|mark|luke|john|acts|romans|1corinthians|2corinthians|galatians|ephesians|philippians|\
                    colossians|1thessalonians|2thessalonians|1timothy|2timothy|titus|philemon|hebrews|james|1peter|2peter|\
                    1john|2john|3john|jude|revelation) 
                        # check if internet is ok
                        echo -en "\e[092mfetching the book requested ($bk), please wait\e[0m"
                        wget -c -O "$bk" https://www.ccontario.com/"$bk" >${tmp_file} 2>&1 & n=1
                        while [[ -z $status ]];do
                            sleep $((n*1/10)) ; echo -ne "\e[032m.\e[0m"
                            if test -f ${tmp_file};then
                                if [[ `grep -E '404 Not Found|failure in name resolution|ERROR 404|unable to resolve host address \
                                    |Unable to establish SSL connection' ${tmp_file}` || `grep '200 OK' ${tmp_file}` ]];then
                                    if [[ `grep -E '404 Not Found|failure in name resolution|ERROR 404|unable to resolve host address|Unable to establish SSL connection' ${tmp_file}` ]];then
                                        echo -e "\nit seems you dont have internet.."
                                        rm ${tmp_file};status=null
                                        exit $?
                                    elif [[ `grep '200 OK' ${tmp_file}` ]];then
                                        while [[ ! -f $bk ]];do
                                            sleep $((n*1/10)) ; echo -ne "\e[032m.\e[0m" ; n=$((n+1))
                                        done && rm ${tmp_file};status=ok
                                    fi
                                fi
                            fi
                            # die if tries <= 24
                            if [[ $n -lt 25 ]];then
                                n=$((n+1))
                            else
                                echo "tried too many times, quitting!" 
                                exit $?
                            fi
                        done
                        echo " OK"
                    ;;
                    *)
                        echo "book $bk not found"
                        echo "please check to see that you entered the correct bible book in small caps, for example 2corinthians"
                        exit $?
                    ;;
                esac
                # check if book was downloaded or not
                if [[ ! -f "$bk" ]];then
                    echo -e "the book you are trying to study to was not downloaded, try running the code again.."
                    exit $?
                fi
            fi
            error_reset(){
                echo -e "an error occured with args: \`$bk\`, try running the code again.."
                if [ ! $1 == -m ];then
                    rm *$bk*
                else
                    rm ".$bk.log" 
                fi
                exit $?
            }
            # sort verses
            if [[ ! -f ".$bk.log" ]];then
                echo -e "\e[097msorting verses ...\e[0m"
                links="cat $bk|grep '.mp3'|grep -o 'http[a-z://a-z.]*calvarychapelontario.com/teaching/[/A-Za-z0-9&a-z;0-9()-.]*'|grep -vE 'notes|\.zip'"
                sort_verses(){
                    while IFS= read -r li;do echo `grep -oP '(?<=teaching/'$bk'/).*(?=\.mp3)'<<<"$li"|sed 's%&amp;%-%g'`  $li;done < <(bash<<<$links)
                }
                sort_verses > ".$bk.log"
            elif [[ ! $(cat ".$bk.log") ]];then
                error_reset -m
            fi
            # print verses / check errors
            if [[ -f ".$bk.log" && $(cat ".$bk.log" 2>&1|wc -l) != 1 && $# -lt 1 ]];then
                awk '{print $1}' ".$bk.log" 2>&1|nl || error_reset
            elif [[ ! -f ".$bk.log" ]];then 
                error_reset
            fi
            # verse selection
            fetch_verse() {
                check_internet(){
                    wget --spider $@ >${tmp_file} 2>&1
                    if [[ $(grep -E "404 Not Found|failure in name resolution|unable to resolve host address|ERROR 404" ${tmp_file}) ]];then
                        echo -e "\e[0mit seems you dont have internet.."
                        rm ${tmp_file} >/dev/null 2>&1
                        exit $?
                    fi
                }
                # save for history
                save_hist(){
                    echo cyt-dl $@>>${hist_file}
                    while IFS= read -r line;do
                        echo $li
                    done < <(tac ${hist_file}|head -n10) >${tmp_file}
                    mv ${tmp_file} ${hist_file}
                    cyt-dl $@
                }
                if [[ $verse == null ]];then
                    case $announce in
                        no)
                        echo -e "\e[094mpicked a random chapter/study\e[0m"
                        ;;
                        *)
                    echo -e "\e[094mthis book contains only one chapter, or atleast that is the only documented chapter..\n \
                the other reason you are getting this is maybe several chapters have been compiled to one\e[0m"
                        ;;
                    esac
                
                    case $audio in  
                        no) check_internet $vid_url
                            save_hist -sf $vid_url ;;
                        *) check_internet $url
                            save_hist -sd $url ;;
                    esac
                else
                    case $audio in 
                        no) check_internet $vid_url
                            save_hist -sf $vid_url ;;
                        *) url=$(cat ".$bk.log" 2>&1|grep ^$goto |awk '{print $2}')
                            check_internet $url 
                            save_hist -sd $url ;;
                    esac
                fi
                rm ${tmp_file} >/dev/null 2>&1
                
            }
            url_selector(){
                if [[ $@ =~ $range ]];then
                    nr=$@
                    goto="$(awk '{print $1}' ".$bk.log" 2>&1|nl|awk 'NR=='"$nr"'' 2>&1|awk '{print $2}')"
                    goto_link="$(awk '{print $2}' ".$bk.log" 2>&1|nl|awk 'NR=='"$nr"'' 2>&1|awk '{print $2}')"
                elif [[ $@ == -r ]];then
                    nr=`awk '{print $1}' ".$bk.log" 2>&1|nl|awk '{print $1}'|shuf|head -n1`
                    goto="$(awk '{print $1}' ".$bk.log" 2>&1|nl|awk 'NR=='"$nr"'' 2>&1|awk '{print $2}')"
                    goto_link="$(awk '{print $2}' ".$bk.log" 2>&1|nl|awk 'NR=='"$nr"'' 2>&1|awk '{print $2}')"
                else
                    error
                fi
                if [[ -n $file_format ]];then
                    if [[ $file_format == video ]];then
                        audio=no
                    fi
                else
                    echo -n "video/audio? "
                    read opt
                    if [[ $opt == video ]];then
                        audio=no
                    elif [[ $opt != audio && $opt != video ]];then
                        echo -n "please give you choice from the above options.."
                        read opt
                        if [[ $opt != audio && $opt != video ]];then
                            echo "sorry but your request was invalid.. quitting"
                            exit $?
                        fi
                        audio=no
                    fi
                fi
                
                case $audio in
                    no)  
                        if [[ $(grep youtu<<<$goto_link) ]];then
                            vid_url=$goto_link
                        else
                            find_url(){
                                vid_url=`grep -ioP '(?<='$bk').*(?='$(cat ".$bk.log" 2>&1|grep ^$goto 2>&1|awk '{print $2}' \
                                    |sed 's#)#\\\)#g'|sed 's#(#\\\(#g')')' $bk|while read p;do echo $p|tr ' ' '\n';done|tac|grep -m1 youtu \
                                    |grep -v calvarychapelontario|grep -oP '(?<=href\=").*(?=$)'|cut -f1 -d'&'` || {
                                        vid_url=`grep -ioP '(?<=href\=").*(?='$url')' $bk|while read p;do echo $p|tr ' ' '\n';done|tac|grep -m1 'yout' \
                                        |grep -v calvarychapelontario|grep -oP '(?<=href\=").*?(?=$)'|cut -f1 -d'&'|head -n1`
                                    }
                                    
                                if [[ -z $vid_url || $(grep '"' <<< $vid_url) ]];then
                                    vid_url=`grep -ioP '(?<='$bk').*(?='$(cat ".$bk.log" 2>&1|grep ^$goto 2>&1|awk '{print $2}' \
                                    |sed 's#)#\\\)#g'|sed 's#(#\\\(#g')')' $bk|while read p;do echo $p|tr ' ' '\n';done|tac|grep -m1 youtu \
                                    |grep -v calvarychapelontario|grep -oP '(?<=href\=").*(?=$)'|cut -f1 -d'"'` || {
                                            vid_url=`grep -ioP '(?<='$bk').*(?='$(cat ".$bk.log" 2>&1|grep ^$goto 2>&1|awk '{print $2}' \
                                            |sed 's#)#\\\)#g'|sed 's#(#\\\(#g')')' $bk|while read p;do echo $p|tr ' ' '\n';done|tac|grep -m1 youtu \
                                            |grep -v calvarychapelontario|grep -oP '(?<=href\=").*?(?=$)'|cut -f1 -d'"'`
                                        }
                                fi
                                
                                if [ -z $vid_url ];then
                                    vid_url=$(grep ''$goto_link'' $bk|while read -r p;do echo $p|tr ' ' '\n';done \
                                    |grep -E '.mp3|youtu'|grep -v "calvarychapelontario"|awk 'NR=='"$nr"''|grep -oP '(?<=href\=\").*(?=\")') || {
                                            vid_url=`cat "$bk"|grep ''$goto_link''|while read -r p;do echo $p|tr ' ' '\n';done \
                                            |grep ''$goto_link'' -A300|grep youtu|grep -v "/calvarychapelontario"|grep -oP '(?=http).*(?=")'` || {
                                                    vid_url=`cat "$bk"|grep ''$goto_link''|while read -r p;do echo $p|tr ' ' '\n';done \
                                                    |grep ''$goto_link'' -B300|grep youtu|grep -v "/calvarychapelontario"|tac|grep -oP '(?=http).*(?=")'`   
                                                }
                                        }
                                fi
                                if test -z $vid_url;then
                                    echo null
                                else
                                    echo $vid_url
                                fi
                            }
                            echo -ne "\e[032mFinding url"
                            find_url >/tmp/.$(basename $0) 2>&1 & n=1
                            until [[ -f /tmp/.$(basename $0 )&& ! -z $vid_url ]];do
                                sleep $((n*1/100))
                                vid_url=`cat /tmp/.$(basename $0)`
                                if [[ $vid_url == null ]];then
                                    echo "Could not find the link to the video, sorry"
                                    exit $?
                                fi
                                echo -n "."
                                n=$((n+1))
                            done
                            echo -e "\e[092mSuccess!\e[0m"
                            rm /tmp/.$(basename $0)
                        fi
                    ;;
                esac 
            }
            [[ $# -gt 2||$file_format != video&&$file_format != audio&& ! -z $file_format ]] && error
            # inspect verses
            if [[ $(cat ".$bk.log" 2>&1|wc -l) == 1 || $1 == -r ]];then
                verse=null
                if [[ $1 == -r ]];then
                    announce=no;url=`cat $base_dir/.$bk.log |awk '{print $2}'|shuf|awk 'NR==1'`
                    url_selector -r
                else
                    url="$(cat ".$bk.log" 2>&1|awk '{print $2}')"
                    url_selector 1
                fi
                fetch_verse $bk
            else
                if [[ $# -eq 0 ]];then
                    echo -en "please select the chapter/verses you would like to listen to : "
                    read verse
                else
                    case $1 in
                        -r) verse=-r ;;
                        *) verse=$1 ;;
                    esac
                fi

                if [[ ! -z $verse && $verse =~ $range ]];then
                    url_selector $verse
                fi
                
                if [[ ! -z $goto && $(grep ^$goto ".$bk.log") ]];then
                    fetch_verse $bk
                else
                    if [[ $# -ne 1 ]];then
                        awk '{print $1}' ".$bk.log" 2>&1|nl
                    fi
                    echo -en "please select a valid choice from the above.. "
                    read verse
                    if [[ ! -z $verse && $verse =~ $range ]];then
                        url_selector $verse
                    fi

                    if [[ ! -z $goto && $(grep ^$goto ".$bk.log") ]];then
                        fetch_verse $bk
                    elif [[ -z $verse ]];then
                        echo "you must enter an input!"
                        exit $?
                    else
                        echo "sorry but I couldn't find such a chapter or verse you gave me.. quitting"
                        exit $?
                    fi

                fi
            fi
        fi
    ;;
esac
